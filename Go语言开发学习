package main
import "fmt"
const Pi = 3.14159
func main(){
   fmt.Println(Pi)
}

常量 
iota 可以被用作枚举值
package main
import "fmt"
const (
	a = iota
	b = iota
	c = iota
)
func main(){
   fmt.Println(b)
}
上面可简写:
const (
	a = iota
	b
	c
)

常量也允许使用并行赋值的形式：
const beef, two, c = "eat", 2, "veg"
const Monday, Tuesday, Wednesday, Thursday, Friday, Saturday = 1, 2, 3, 4, 5, 6
const (
	Monday, Tuesday, Wednesday = 1, 2, 3
	Thursday, Friday, Saturday = 4, 5, 6
)


const (
	Sunday = iota
	Monday
	Tuesday
	Wednesday
	Thursday
	Friday
	Saturday
)

变量
var a, b *int  #申明a,b都是变量
var a int
var b bool
var str string

var (
	a int
	b bool
	str string
)
变量的申明
package main
import "fmt"
var a int=15
var i =5
var abc string="go says hello to the world!"
func main(){
   fmt.Print(abc)
}

# Go 编译器的智商已经高到可以根据变量的值来自动推断其类型
var a = 15
var b = false
var str = "Go says hello to the world!"
或：
var (
	a = 15
	b = false
	str = "Go says hello to the world!"
	numShips = 50
	city string
)




实例
package main
import(
	"fmt"
	"os"
	"runtime"
)
func main(){
	var goos string = runtime.GOOS
	//fmt.Printf(goos)
	fmt.Printf("The poerating system is:%s\n",goos)
	path :=os.Getenv("PATH")
	fmt.Printf("Path is %s\n",path)
	//fmt.Printf(goos)
	fmt.Printf("%s\n",path)
	fmt.Printf("%s\n",goos)
}
%s 代表字符串标识符、%v 代表使用类型的默认输出格式的标识符


package main
var a = "G"
func main() {
	n()
	m()
	w()
	h()
}
func h(){
	a:="h"
	print(a)
}
func n() { print(a) }
func w(){
	a:="w"
	println(a)
}
func m() {
	a := "O"
	print(a)
}


package main

var a,b string  #一般来说都是先声明变量类型

func main() {
	a = "G"
	b = "C"
	print(a)
	f1()
}

func f1() {
	a := "O"
	print(a)
	f2()
}

func f2() {
	print(a,b)
}


在格式化字符串里，%d 用于格式化整数（%x 和 %X 用于格式化 16 进制表示的数字），%g 用于格式化浮点型（%f 输出浮点数，%e 输出科学计数表示法），%0nd 用于规定输出长度为n的整数，其中开头的数字 0 是必须的 %s表示字符串
%c 用于表示字符；当和字符配合使用时，%v 或 %d 会输出用于表示该字符的整数；%U 输出格式为 U+hhhh 的字符串（另一个示例见第 5.4.4 节）。
基本类型和运算符
package main
import "fmt"
var m int32
func main(){
	var n int16=34
	m=int32(n)
	fmt.Printf("32 bit int is: %d\n", m)
	fmt.Printf("16 bit int is: %d\n", n)
}
complex64 (32 位实数和虚数)
complex128 (64 位实数和虚数)
var c1 complex64 = 5 + 10i
fmt.Printf("The value is: %v", c1)
// 输出： 5 + 10i


\n：换行符
\r：回车符
\t：tab 键
\u 或 \U：Unicode 字符
\\：反斜杠自身

= 使用必须使用先var声明例如
:= (做字符串拼接使用):= 是声明并赋值，并且系统自动推断类型，不需要var关键字
package main
import "fmt"
func main(){
	s := "hel" + "lo,"
	b := "world!"
	c:=s+b
	fmt.Println(c) //输出 “hello, world!”
}



package main
import (
	"fmt"
	"strings"
)
func main()  {
	var str string = "Hi,I'm Marc,Hi"
	fmt.Printf("The position of \"Marc\" is:")
	fmt.Printf("%d\n", strings.Index(str, "Marc"))
	fmt.Printf("The position of the first instance of \"Hi\" is: ")
	fmt.Printf("%d\n", strings.Index(str, "Hi"))
	fmt.Printf("The position of the last instance of \"Hi\" is: ")
	fmt.Printf("%d\n", strings.LastIndex(str, "Hi"))
	fmt.Printf("The position of \"Burger\" is: ")
	fmt.Printf("%d\n", strings.Index(str, "Burger"))
}


package main

import (
	"fmt"
	"strings"
)

func main() {
	var str string = "Hello, how is it going, Hugo?"
	var manyG = "gggggggggg"

	fmt.Printf("Number of H's in %s is: ", str)
	fmt.Printf("%d\n", strings.Count(str, "h"))

	fmt.Printf("Number of double g's in %s is: ", manyG)
	fmt.Printf("%d\n", strings.Count(manyG, "g"))
}


Repeat 用于重复 count 次字符串 s 并返回一个新的字符串strings.Repeat(s, count int) string
package main
import (
"fmt"
"strings"
)
func main() {
	var origS string = "Hi there! "
	var newS string
	newS = strings.Repeat(origS, 5)
	fmt.Printf("The new repeated string is: %s\n", newS)
}



package main

import (
	"fmt"
	"strings"
)
ToLower 将字符串中的 Unicode 字符全部转换为相应的小写字符：

strings.ToLower(s) string
ToUpper 将字符串中的 Unicode 字符全部转换为相应的大写字符：

strings.ToUpper(s) string
func main() {
	var orig string = "Hey, how are you George?"
	var lower string
	var upper string

	fmt.Printf("The original string is: %s\n", orig)
	lower = strings.ToLower(orig)
	fmt.Printf("The lowercase string is: %s\n", lower)
	upper = strings.ToUpper(orig)
	fmt.Printf("The uppercase string is: %s\n", upper)
}

修剪字符串
你可以使用 strings.TrimSpace(s) 来剔除字符串开头和结尾的空白符号；如果你想要剔除指定字符，则可以使用 strings.Trim(s, "cut") 来将开头和结尾的 cut 去除掉。该函数的第二个参数可以包含任何字符，如果你只想剔除开头或者结尾的字符串，则可以使用 TrimLeft 或者 TrimRight 来实现
分割字符串
strings.Fields(s) 将会利用 1 个或多个空白符号来作为动态长度的分隔符将字符串分割成若干小块，并返回一个 slice，如果字符串只包含空白符号，则返回一个长度为 0 的 slice。

strings.Split(s, sep) 用于自定义分割符号来对指定字符串进行分割，同样返回 slice。

因为这 2 个函数都会返回 slice，所以习惯使用 for-range 循环来对其进行处理（第 7.3 节）





具体语法意义不解释了。现在看看 '_' 在包引入中的功能。
import _ "the/third/pkg"
此时引入的第三方包"the/third/pkg",如果引入的结果是一个空标识符'_'。按其空标识符的原始意义，就是对于使用方而言，没有任何意义，因为无法使用被引入包中任何变量或是函数
package main
import (
	"fmt"
	"strings"
)
func main() {
	str := "The quick brown fox jumps over the lazy dog"
	sl := strings.Fields(str) //Fields是分隔字符串的意思
	fmt.Printf("Splitted in slice: %v\n", sl)
	for _, val := range sl {
		fmt.Printf("%s *", val)
	}
	fmt.Println()
	str2 := "GO1|The ABC of Go|25"
	sl2 := strings.Split(str2, "|")
	fmt.Printf("Splitted in slice: %v\n", sl2)
	for _, val := range sl2 {
		fmt.Printf("%s - ", val)
	}
	fmt.Println()
	str3 := strings.Join(sl2,"!!")
	fmt.Printf("sl2 joined by ;: %s\n", str3)
}


字符串与其它类型的转换
package main

import (
	"fmt"
	"strconv"
)

func main() {
	var orig string = "666"
	var an int
	var newS string

	fmt.Printf("The size of ints is: %d\n", strconv.IntSize) //打印cpu核心数

	an, _ = strconv.Atoi(orig) //将字符串转换为 int 型
	fmt.Printf("The integer is: %d\n", an)
	an = an + 5
	newS = strconv.Itoa(an)//将字符串转换为 int 型
	fmt.Printf("The new string is: %s\n", newS)
}

时间和日期:
package main
import (
	"fmt"
	"time"
)
var week time.Duration
func main() {
	t := time.Now()
	fmt.Println(t) // e.g. Wed Dec 21 09:52:14 +0100 RST 2011
	fmt.Printf("%02d.%02d.%4d\n", t.Day(), t.Month(), t.Year())
	// 21.12.2011
	t = time.Now().UTC()
	fmt.Println(t) // Wed Dec 21 08:52:14 +0000 UTC 2011
	fmt.Println(time.Now()) // Wed Dec 21 09:52:14 +0100 RST 2011
	// calculating times:
	week = 60 * 60 * 24 * 7 * 1e9 // must be in nanosec
	week_from_now := t.Add(time.Duration(week))
	fmt.Println(week_from_now) // Wed Dec 28 08:52:14 +0000 UTC 2011


	// formatting times:
	fmt.Println(t.Format(time.RFC822)) // 21 Dec 11 0852 UTC
	fmt.Println(t.Format(time.ANSIC)) // Wed Dec 21 08:56:34 2011
	fmt.Println(t.Format("02 Jan 2006 15:04")) // 21 Dec 2011 08:52
	s := t.Format("20060102")
	fmt.Println(t, "=>", s)
	// Wed Dec 21 08:52:14 +0000 UTC 2011 => 20111221
}




指针：
package main
import "fmt"
func main() {
	var i1 = 5
	fmt.Printf("An integer: %d, its location in memory: %p\n", i1, &i1)
	var intP *int
	intP = &i1
	fmt.Printf("The value at memory location %p is %d\n", intP, *intP)  五的指针 指向5
}




通过对 *p 赋另一个值来更改“对象”，这样 s 也会随之更改。
package main
import "fmt"
func main() {
	s := "good bye"
	var p *string = &s
	*p = "ciao"
	fmt.Printf("Here is the pointer p: %p\n", p) // prints address
	fmt.Printf("Here is the string *p: %s\n", *p) // prints string
	fmt.Printf("Here is the string s: %s\n", s) // prints same string
}



控制结构:
 if-else 结构
 
 package main

import "fmt"

func main() {
	var first int = 10
	var cond int

	if first <= 0 {
		fmt.Printf("first is less than or equal to 0\n")
	} else if first > 0 && first < 5 {
		fmt.Printf("first is between 0 and 5\n")
	} else {
		fmt.Printf("first is 5 or greater\n")
	}
	if cond = 5; cond > 10 {
		fmt.Printf("cond is greater than 10\n")
	} else {
		fmt.Printf("cond is not greater than 10\n")
	}
}

switch 结构
ackage main

import "fmt"

func main() {
	var num1 int = 100

	switch num1 {
	case 98, 99:
		fmt.Println("It's equal to 98")
	case 100: 
		fmt.Println("It's equal to 100")
	default:
		fmt.Println("It's not equal to 98 or 100")
	}
}





package main

import "fmt"

func main() {
	var num1 int = 7

	switch {
	    case num1 < 0:
		    fmt.Println("Number is negative")
	    case num1 > 0 && num1 < 10:
		    fmt.Println("Number is between 0 and 10")
	    default:
		    fmt.Println("Number is 10 or greater")
	}
}

程序也不会自动地去执行下一个分支的代码。如果在执行完每个分支的代码后，还希望继续执行后续分支的代码，可以使用 fallthrough 关键字来达到目的


https://github.com/unknwon/the-way-to-go_ZH_CN/blob/master/eBook/05.3.md 


package main
import "fmt"
func main() {
	Season := 3
	switch  {
	case Season>=3:
		fmt.Println("春天")

	}
}

循环:for结构
package main

import "fmt"

func main() {
	for i :=0;i<5;i++{
		fmt.Printf("this is the %d iteration\n",i)
	}
}

import "fmt"

func main() {
	// 1:
	for i := 0; i < 15; i++ {
		fmt.Printf("The counter is at %d\n", i)
	}
	// 2:
	i := 0
START:
	fmt.Printf("The counter is at %d\n", i)
	i++
	if i < 15 {
		goto START
	}
}


package main
import "fmt"
func main()  {
	for i :=1;i<=100;i++{
		switch  {
		case i%3==0:
			fmt.Println("Fizz")
			continue
		case i%5==0:
			fmt.Println("FizzBuzz")
			continue
		}
		fmt.Printf("this is a %d",i)
		fmt.Println()

	}

}



package main

import "fmt"

const (
	FIZZ     = 3
	BUZZ     = 5
	FIZZBUZZ = 15
)

func main() {
	for i := 0; i <= 100; i++ {
		switch {
		case i%FIZZBUZZ == 0:
			fmt.Println("FizzBuzz")
		case i%FIZZ == 0:
			fmt.Println("Fizz")
		case i%BUZZ == 0:
			fmt.Println("Buzz")
		default:
			fmt.Println(i)
		}
	}
}

package main
import "fmt"
func main()  {
	w,h:=20,10
	for i :=1;i<=h;i++{
		for j:=1;j<=w;j++{
			fmt.Print("*")
		}
		fmt.Println()
	}
}

package main
import "fmt"
func main() {
	str := "Go is a beautiful language!"
	fmt.Printf("The length of str is: %d\n", len(str))
	for pos, char := range str {
		fmt.Printf("Character on position %d is: %c \n", pos, char)
	}
	fmt.Println()
	str2 := "Chinese: 日本語"
	fmt.Printf("The length of str2 is: %d\n", len(str2))
	for pos, char := range str2 {
		fmt.Printf("character %c starts at byte position %d\n", char, pos)
	}
	fmt.Println()
	fmt.Println("index int(rune) rune    char bytes")
	for index, rune := range str2 {
		fmt.Printf("%-2d      %d      %U '%c' % X\n", index, rune, rune, rune, []byte(string(rune)))
	}
	
	
package main

import (
	"fmt"
)

func SumProductDiff(i, j int) (int, int, int) {
	return i + j, i * j, i - j
}

func SumProductDiffN(i, j int) (s int, p int, d int) {
	s, p, d = i+j, i*j, i-j
	return
}

func main() {
	sum, prod, diff := SumProductDiff(3, 4)
	fmt.Println("Sum:", sum, "| Product:", prod, "| Diff:", diff)
	sum, prod, diff = SumProductDiffN(3, 4)
	fmt.Println("Sum:", sum, "| Product:", prod, "| Diff:", diff)
}