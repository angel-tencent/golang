go env -w GOPROXY=https://goproxy.cn,direct  设置go的环境变量为国内镜像
go env -w GO111MODULE=on #设置go的module环境
go get  -v golang.org/x/tools/cmd/goimports #拉取go的环境这个时候会比较方便 设置了国内的镜像和go module
https://github.com/goproxy/goproxy.cn/blob/master/README.zh-CN.md  #go在中国的镜像
关于ide的安装略过
变量的定义
package main
import "fmt"
var (aa=3 //包内变量
    ss = "kk"
    bb=true
)
func variable()  {
	var a int  //int型的默认是0
	var s string  string型的默认是,即为空字符
	fmt.Printf("%v,%v\n",a,s)
}
func variableintvalue()  {
	var a,b int=3,4
	var s string="abc"
	fmt.Println(a,s,b)
}
func variabletypedefuction()  {
	var a,b,c,s=3,4,true,"def"
	fmt.Println(a,b,c,s)
}
func variableshotrer()  {
	a,b,c,s:=3,4,true,"def"
	b=5
	fmt.Println(a,b,c,s)
}
func main()  {
	variable()
	variableintvalue()
	variabletypedefuction()
	variableshotrer()
	fmt.Println("hello world")
	fmt.Println(aa,ss,bb)
}
内建变量类型
基本数据类型:整型 浮点型 布尔型 字符串 字符 
符合数据类型: 指针 数组 切片 映射 函数 结构体 通道
bool strig 
整数:有符号整数和无符号长度int uint(不定长度)根据cpu核心数来定 int8 uint8 int16 uint16 int32 uint32 int64 uint64 uintptr(指针)
byte rune(一字节的)字符 uint8类型，或者叫 byte 型，代表了ASCII码的一个字符。rune类型，代表一个 UTF-8字符。
float32(浮点型) float64 complex64 complex128(复数(有实数和虚数之别))

强制类型转换
类型转换是强制的sqrt是计算机术语,编程中sqrt表示开平方根
var a,b int=3,4
package main
import (
	"fmt"
	"math"
	"math/cmplx"
)
func euler()  {
	c:=3+4i //4i是表示复数
	fmt.Println(cmplx.Abs(c))
}
func euler1()  {
	fmt.Println(
		cmplx.Exp(1i*math.Pi)+1)
}
func triangle()  {
	var a,b int=3,4
	var c int
	c=int(math.Sqrt(float64(a*a+b*b)))  //因为math.Sqrt这个类型的默认在求开平方根的时候需要将int转换成float型才可以计算
	fmt.Println(c)
}
func main()  {
	euler()
	euler1()
	triangle()
}
-------------------
package main
import (
	"fmt"
)
func test()  {
	var i int
	var o float64
	i=3
	o=1.999
	c:=int(float64(i)*o)
	fmt.Println(c)
}
func main()  {
	test()
}

这节主要是讲了go的变量类型 常用的与其他语言一样 多了一个复数的概念
常量与枚举
package main
import (
	"fmt"
	"math"
)
func consts()  {
	const (
		filename="a.txt"
		a,b=3,4
	)
	var c int
	c=int(math.Sqrt(a*a+b*b)) //这里的sqrt类型必须是float类型的 但是我们无需转换自动可以 如果是变量则必须转换后才可以
	fmt.Println(filename,c)
}
func enumes()  {
	const(
		cpp=iota
		_   //被跳过
		python
		golang
		javascript
	)
	const(
		b=1<<(10*iota) //iota根据表达式自增值
		kb
		mb
		gb
		tb
		pb
	)
	fmt.Println(cpp,javascript,python,golang)
	fmt.Println(b,kb,mb,gb,tb,pb)
}
func main()  {
	consts() //常量
	enumes() //枚举
}
math.Sqrt 求开平方根
-----------------------------------
func changliang()  {
	const a=3
	const b float64 =5.3
	fmt.Println(float64(a)*b)
}
func meiju()  {
	const(
		dd  = iota+1
		ff
		qq
		wew
		op
		dsda
		qqa
	)
	fmt.Println(dd,ff,qq,wew,op,dsda,qqa)
}
条件语句

package main
import (
	"fmt"
	"io/ioutil"
)

func bounded(v int) int  {
	if v>100{
		return 100
	}else if v<0{
		return 0
	}else {
		return v
	}
}
func main()  {
	const filename="abc.txt"
	contents,err:=ioutil.ReadFile(filename) //读取文件用readfile函数
	if err!=nil{
		fmt.Println(err)
	}else {
		fmt.Printf("%s\n",contents)//contents是取的文件里面的数据
	}
	bounded(100)
}


package main
import (
	"fmt"
	"io/ioutil"
)
func main()  {
	const filename="abdc.txt"  //在当前文件新建一个文件abdc.txt里面写点数据就好了
	 //读取文件用readfile函数
	if contents,err:=ioutil.ReadFile(filename); err!=nil {
		//log.Fatal(err)
		fmt.Println(err)
	}else {
		fmt.Printf("%s\n",contents)//contents是取的文件里面的数据
	}
}

package main
import (
	"fmt"
	"io/ioutil"
)
func grade(score int)  string{
	g:=""
	switch  {
	case score<0||score>100:   //或运算
		panic(fmt.Sprintf(
			"Wrong score:%d",score))
	case score<60:
		g="F"
	case score<80:
		g="C"
	case score<90:
		g="B"
	case score<=100:
		g="A"
	}
	return g
}
func main()  {
	const filename="abc.txt"
	 //读取文件用readfile函数
	if contents,err:=ioutil.ReadFile(filename); err!=nil { //用两个值来接收打开文件函数的值 ReadFile是读取文件的函数
		//log.Fatal(err)
		fmt.Println(err)
	}else {
		fmt.Printf("%s\n",contents)//contents是取的文件里面的数据
	}
	fmt.Println(
		grade(0),
		grade(59),
		grade(60),
		grade(82),
		grade(99),
		grade(100),
		//grade(111), //有pance则中短错误的
		)
}

switch语句
package main
import "fmt"
func main() {
	SocreGrade()
}
func SocreGrade() {  //case语句自带了有break中断程序 只匹配到一个后面就中断了
	score := 98.5
	grade := "" //让其是一个字符串类型但是先不给值 后面判断之后再给值
	switch {    //不给函数参数默认为true值
	case score >= 90:
		grade = "a"
		fallthrough //添加这个则会返回两个值 意思是强制执行后面的case语句
	case score >= 80:
		grade = "b"
	case score >= 70:
		grade = "c"
	case score >= 60:
		grade = "d"
	default:
		grade = "e"
	}
	fmt.Printf("你的等级是:%s \n", grade)
	fmt.Printf("你的评价是: ")//这里不写的原因是下面还有一个输出
	//grade:="a" //利用变量的方式去做执行判断
	switch grade {
	case "a":
		fmt.Println("优秀")
	case "b":
		fmt.Println("良好")
	case "c":
		fmt.Println("中等")
	case "d":
		fmt.Println("及格")
	default:
		fmt.Println("不及格")
	}

}
判断年月日天数
package main
import "fmt"
func main() {
	getDaysByMonth()
}
func getDaysByMonth() {
	//定义局部变量:年月日
	year := 2019
	month := 12
	days := 0
	switch month {
	case 1, 3, 5, 7, 8, 10, 12:
		days = 31
	case 4, 6, 9, 11:
		days = 30
	case 2:
		if (year%4 == 0 && year%100 != 0) || year%400 == 0 {
			days = 29
		} else {
			days = 28
		}
	default:
		days = -1
	}
	fmt.Printf("%d年%d月的天数为:%d", year, month, days)
}

package main
import "fmt"
func casess(a int) string {
	g:=""
	switch {
	case a<0||a>100:
	panic(fmt.Sprintf("Wrong score:%d",a))
	case a<10:
		g="fd"
		fallthrough
	case a<20:
		g="qw"
	case a<30:
		g="po"
	}
	return g
}
func main()  {
	fmt.Println(
		casess(2),
		casess(23),
	)
}
switch语句默认带有中断fallthrough  增加它才会执行后面的
循环
//打印99乘法表:
func chengfabiao()  {
	for i:=1;i<=9;i++{
		for j:=1;j<=i;j++{
			fmt.Printf("%d*%d=%d ",i,j,i*j)
		}
		fmt.Println( )
	}
}
-------------------------------------
package main
import (
	"bufio"
	"fmt"
	"os"
	"strconv"
)
func convert(n int)string  {
	result:=""
	for ;n>0;n/=2{  //;表示没有起始条件 结束条件是n
		lsb:=n%2
		result=strconv.Itoa(lsb)+result
	}
	return result
}
func printfile(filename string)  {
	file,err:=os.Open(filename) //以追加和读写的方式去打开文件 这里不直接读取而是打开文件之后一行一行的读取
	if err!=nil{
		panic(err) //panic是报错的意思 如果文件不存在则报错 并且将程序停下来
	}
	//我们下面先打开一个文件再逐行扫描去读取它
	scanner:=bufio.NewScanner(file) //将打开文件之后通过Newscanner的方式一行一行的读取出来文件的内容
	for scanner.Scan(){  //这里的for没有起始和递增条件 可以省略分号 遍历这个文件的时候需要用到打开文件之后的得到的参数scaner的scan函数来读取 scan是扫描的意思 for循环这里是一直扫描直到没有为止
		fmt.Println(scanner.Text()) //Text表示scanner出来的一行显示出来,这样逐步显示所有行
	}
}
func forener()  {
	for{ //什么不加就是死循环
		fmt.Println("abc")
	}
}
func main()  {
	fmt.Println(
		convert(5),
		convert(13), //算10进制转2进制
		)
	printfile("abc.txt")
	//forener()
}

函数:
sudo curl -sSL https://get.docker.com/ | sh #通过一个web页面去书写代码


package main
import "fmt"
func Getclass(a int) (stuNum int,classname,headtecher string)  {
	return a,"sda","二班"
}
func main()  {
	stuNum,_,_:=Getclass(1)
	fmt.Println(stuNum)
}

package main
import (
	"fmt"
	"math"
)
var Pi float64
func init()  {
	Pi=4*math.Atan(1) //这里的init是初始化函数的一个实体不是正规的函数类型主要用来初始化全局变量使用
}
func test()  {
	var a rune=2334443
	var b byte=34 //这个类型只能两位数
	fmt.Printf("%v,%v",a,b)
}
func main()  {
	test()
	DPi:=Pi*Pi
	fmt.Print(Pi,DPi)
}

package main
import "fmt"
func main()  {
	s:="我是中国人"
	for i:=0;i<len(s);i++{
		//fmt.Println("%v",s[i])
		fmt.Printf("%d=%v\n",i,s[i])
	}
	fmt.Printf("\n")
	for _,v:=range s{
		fmt.Printf("%c",v)
	}
	fmt.Print("\n")
}

package main
import "fmt"
func main()  {
	s:="hello世界"
	b:=[]byte(s) //转换为[]byte自动复制数据
	b[5]=',' //修改字符串的单个字符
	fmt.Printf("%s\n",s)
	fmt.Printf("%s\n",b)
}
----------------------------------------------
package main
import (
	"fmt"
	"math"
	"reflect"
	"runtime"
)
func eval(a,b int,op string) (int,error)  {
	switch op {
	case "+":
		return a+b,nil
	case "-":
		return a-b,nil
	case "*":
		return a*b,nil
	case "/":
		q,_:=div(a,b)
		return q,nil
	default:
		return 0,fmt.Errorf("unspported operation:%s",op)
	}
}
func div(a,b int) (q,r int) {
	return a/b,a%b
}
func apply(op func(int,int)int,a,b int) int  { //这里的apply函数的参数有三个返回一个int,这是一个将函数作为参数的写法
	p:=reflect.ValueOf(op).Pointer() //这一步是获得p函数的值的指针
	opName:=runtime.FuncForPC(p).Name() //这一步是获得p函数的名字必须由此两步才能获得
	fmt.Printf("Calling function %s with args"+
		"(%d,%d\n)",opName,a,b)  //%s是一个字符串获取 打印op函数的名字,a,b是函数的值
	return op(a,b) //作为函数的op参数需要两个值传进去才返回int op是函数名 类型写在后面
}
func pow(a,b int)int  {  //由于math.Pow内建函数返回的是float64类型所以这里需要强制类型转换之后才能调apply函数,因为math.Pow函数的类型与apply需要传递的参数一样所以用它做实验
	return int(math.Pow(float64(a),float64(b)))
}
func main(){
	if result,err:=eval(3,4,"*");err!=nil{
		fmt.Println("error:",err)
	}else {
		fmt.Println(result)
	}
	fmt.Println(eval(3,4,"/"))
	q,r:=div(13,3)
	fmt.Println(q,r)
	fmt.Println(apply(pow,3,4))
	fmt.Println(apply(   //也可以简单写法写成匿名函数，直接定义在apply函数内部当成一个参数
		func(a int, b int) int {
			return int(math.Pow(
				float64(a),float64(b)))
			},3,2)) //此写法与之前有相同的意义
}
---------------------------------------------
package main
import (
	"fmt"
	"math"
	"reflect"
	"runtime"
)
func apply(op func(int,int)int,a,b int) int  { //这里的apply函数的参数有三个返回一个int,这是一个将函数作为参数的写法
	p:=reflect.ValueOf(op).Pointer() //这一步是利用内置反射函数获得p函数的值的指针
	opName:=runtime.FuncForPC(p).Name() //这一步是获得p函数的名字必须由此两步才能获得
	fmt.Printf("Calling function %s with args"+"(%d,%d\n)",opName,a,b)  //%s是一个字符串获取 打印op函数的名字,a,b是函数的值
	return op(a,b) //作为函数的op参数需要两个值传进去才返回int op是函数名 类型写在后面
}
func pow(a,b int)int  {  //由于math.Pow内建函数返回的是float64类型所以这里需要强制类型转换之后才能调apply函数,因为math.Pow函数的类型与apply需要传递的参数一样所以用它做实验
	return int(math.Pow(float64(a),float64(b)))  //math.Pow函数用来获取底数以a为低b次方的值
}
func main(){
	fmt.Println(apply(pow,3,4))
}
指针
package main
import "fmt"
func swap(a,b *int)  {
	*a,*b=*b,*a
}
func main()  {
	a,b:=3,4
	swap(&a,&b)
	fmt.Println(a,b)
}
------------------
或者更好的定义方法不用指针
package main
import "fmt"
func swap(a,b int) (int,int) {
	return b,a
}
func main()  {
	a,b:=3,4
	a,b=swap(a,b)
	fmt.Println(a,b)
}

数组
package main
import "fmt"

func printarray(arr *[5]int)  { //把数组当成函数的参数来定义
	arr[0]=100
	for i,v:=range arr{
		fmt.Println(i,v)
	}
}
func shuzu()  {
		var arr1 [5] int
		arr2:=[3]int{1,3,5}
		arr3:=[...]int{2,4,5,6,8}
		var grid [4][5]int //4个长度为5的int数组
		fmt.Println(arr1,arr2,arr3,grid)
		for i,v:=range arr3{  //range可以同时获得元素和下标
			fmt.Println(i,v)
		}
}
func main()  {
	var arr1 [5] int
	arr3:=[...]int{2,4,5,6,8}
	shuzu()
	printarray(&arr1) //引用指针就表示改变了它的值
	printarray(&arr3)
}

切片的概念
Slice
package main
import "fmt"
func main()  {
	arr:=[...]int{0,1,2,3,4,5,6,7}
	fmt.Println(arr[2:6])
	fmt.Println(arr[:])
	fmt.Println(arr[:4])
	fmt.Println(arr[2:])
	s1:=arr[:]
	s1[0]=100
	fmt.Println(s1)
	s1=arr[:5]
	fmt.Println(s1)
	s1=arr[2:5] //前面显示的是arr的切片
	fmt.Println(s1)
	s1=s1[:3]
	fmt.Println(s1)
	s1=s1[2:] //由于切片直接像指针的方式一样改变了数值所以取出来的是新值
	fmt.Println(s1)
	s2:=arr[:]
	fmt.Println(s2)
	s2=s2[2:3]
	fmt.Println(s2)
	fmt.Printf("%v,%d,%d\n",s2,len(s2),cap(s2))
	s2=s2[1:5]
	//fmt.Println(s2)
	fmt.Printf("%v,%d,%d",s2,len(s2),cap(s2))
}
--------------------------------------------------
package main
import "fmt"
func main()  {
	arr:=[...]int{0,1,2,3,4,5,6,7}
	fmt.Println(arr[2:6])
	fmt.Println(arr[:])
	fmt.Println(arr[:4])
	fmt.Println(arr[2:])
	s1:=arr[:]
	s1[0]=100
	fmt.Println(s1)
	s1=arr[:5]
	fmt.Println(s1)
	s1=arr[2:5] //前面显示的是arr的切片
	fmt.Println(s1)
	s1=s1[:3]
	fmt.Println(s1)
	s1=s1[2:] //由于切片直接像指针的方式一样改变了数值所以取出来的是新值
	fmt.Println(s1)
	s2:=arr[:]
	fmt.Println(s2)
	s2=s2[2:3]
	fmt.Println(s2)
	fmt.Printf("%v,%d,%d\n",s2,len(s2),cap(s2))
	s2=s2[1:5]
	//fmt.Println(s2)
	fmt.Printf("%v,%d,%d",s2,len(s2),cap(s2))
	s3:=append(s2,10)
	fmt.Println(s3)
	s4:=append(s3,11)
	fmt.Println(s4)
	var s []int
	for i:=0;i<100;i++{//利用切片追加的方式打印100以内的奇数
		s=append(s,2*i+1)
	}
	fmt.Println(s)
	s5:=make([]int,10,32)
	fmt.Println(s5,len(s5),cap(s5))
	s5=append(s5[:4],s5[5:]...) //删除第4个元素
	fmt.Println(s5)
}

map
package main

import "fmt"

func main()  {
	m:=map[string]string{
		"name":"ccmouse",
		"course":"golang",
		"site":"imooc",
		"quality":"notbad",
	}
	fmt.Println(m)
	m2:=make(map[string]int)
	var m3 map[string]int
	fmt.Println(m2,m3)
	for k,v:=range m{
		fmt.Println(k,v)
	}
	courseName:=m["course"]
	fmt.Println(courseName) //获取map单个key
	if courseName,ok:=m["course"];ok{ //写个判断来看下map里面的这个course具体是否存在
		fmt.Println(courseName)
	}else {
		fmt.Println("error key is not exeis")
	}
	delete(m,"name")
	name,ok:=m["name"]
	fmt.Println(name,ok)
}

---------------------------------
map例题

//寻找最长不含有重复字符的子串
//abcabcbb->abc
//bbbbb->b
//pwwkew->wke
package main
import "fmt"
func lengthOfNonRepeatingsubstr(s string)int {
	lastOccurred:=make(map[rune]int)
	start:=0
	maxLength:=0
	for i,ch:=range []rune(s){ //直接改成rune就支持中文了
		if lastI,ok:=lastOccurred[ch];ok&&lastI>=start{
			start=lastI+1
		}
		if i-start+1>maxLength{
			maxLength=i-start+1
		}
		lastOccurred[ch]=i
	}
	return maxLength
}
func main()  {
	fmt.Println(lengthOfNonRepeatingsubstr("abcabcbb"))
	fmt.Println(lengthOfNonRepeatingsubstr("bbbbb"))
	fmt.Println(lengthOfNonRepeatingsubstr("werwerwersddd"))
}
字符和字符串处理
package main
import "fmt"
func main()  {
	s:=("123我爱慕课网!")
	for i,ch:=range []rune(s){ //int32类型而rune用来表示Unicode的code point 因为其中的rune函数返回两个值
		fmt.Printf("(%d %c)",i,ch)
	}
	fmt.Println()
}

rune相当于go的char
使用range遍历pos rune对
使用uft8.runecountinstring获得字符数量
使用len获得字节长度
使用[]byte获得字节
如何定义Go的map并插入元素
package main
import "fmt"
func main() {
	var countryCapitalMap map[string]string /*创建集合 */
	countryCapitalMap = make(map[string]string)
	/* map插入ey - value对,各个国家对应的首都 */
	countryCapitalMap [ "France" ] = "巴黎"
	countryCapitalMap [ "Italy" ] = "罗马"
	countryCapitalMap [ "Japan" ] = "东京"
	countryCapitalMap [ "India " ] = "新德里"
	/*使用键输出地图值 */
	for country := range countryCapitalMap {
		fmt.Println(country, "首都是", countryCapitalMap [country])
	}
	/*查看元素在集合中是否存在 */
	capital, ok := countryCapitalMap [ "American" ] /*如果确定是真实的,则存在,否则不存在 */
	if (ok) {
		fmt.Println("American 的首都是", capital)
	} else {
		fmt.Println("American 的首都不存在")
	}
}
面向对象

结构体和方法

package main
import "fmt"
type treeNode struct { //这里定义完了treeNode的结构体格式
	value int //默认情况下value是0
	left,right *treeNode //left和right是nil
}

func (node treeNode) print()  { //定义一个接受者 print是给前面的node来接收的
	fmt.Print(node.value," ") //显示node的3就出来了 go语言所有参数都是传值的
}
func (node *treeNode)setValue(value int)  {
	node.value=value
}
func (node *treeNode)zhizhen(value int)  {
	if node==nil{
		fmt.Println("Setting value to nil node.Ignored")
		return
	}
	node.value=value
}
func createNode(value int) *treeNode  { //写一个结构体引用的工厂构造函数
	return &treeNode{value:value}
}
func main()  {
	var root treeNode  //这里创建也就是实例化这个结构体
	root=treeNode{value:3} //使得value=3 left=nil right=nil
	root.left=&treeNode{} // 0 nil nil
	root.right=&treeNode{5,nil,nil} //这里让它按照顺序填进去
	root.right.left=new(treeNode)//这里的new是一个内建函数 表示创建一个与treenode一样结构体的空结构体
	nodes:=[]treeNode{ //用切片的方式使用这个结构体
		{value:3}, //3  nil nil
		{}, //0 nil nil 
		{6,nil,&root}, //6 nil 内存地址
	}
	fmt.Println(nodes)
	root.left.right=createNode(2) //返回具体变量的地址
	fmt.Println(root.left.right)
	root.print()
	fmt.Println()
	root.right.left.setValue(4)
	root.right.left.print()
	fmt.Println()
	root.print()
	root.zhizhen(100)
	var pRoot *treeNode
	pRoot.zhizhen(200)
	pRoot=&root
	pRoot.setValue(300)
	pRoot.print()
	
}//只有指针可以改变结构内容
//nil指针也可以调用方法
go只支持封装 不支持继承和多态
包和封装大写就可以调用了 此章略过
扩展已有类型
在go语言里面我们没有继承的概念 因为这比较复杂 那么我们怎么对这些已有的类型添加一些功能呢?
他有两种方法:
定义别名 或者使用组合
package queue  //别名的方式
type Queue []int
func (q *Queue) Push(v int)  {
	*q=append(*q,v)
}
func (q *Queue) Pop()int  {
	head:=(*q)[0]
	*q=(*q)[1:]
	return head
}
func (q *Queue) IsEmpty()bool  {
	return len(*q)==0
}


package main
import (
	"bee_1.10.0_windows_amd64/公司项目/queue"
	"fmt"
)
func main()  {
	q:=queue.Queue{1}
	q.Push(2)
	q.Push(3)
	fmt.Println(q.Pop())
	fmt.Println(q.Pop())
	fmt.Println(q.IsEmpty())
	fmt.Println(q.Pop())
	fmt.Println(q.IsEmpty())
}

使用内嵌函数来扩展已有类型(只有当确实能够为我们省下很多代码的时候才使用内嵌 一般情况下别人不是很能看懂)

第五章
依赖管理
依赖的概念
go依赖管理的三个阶段go path govendor gomod(2018年年底)
go get go.uber.org/

接口的概念
在当前目录定义一个新的文件夹infra表示开发的项目
package infra
import (
	"io/ioutil"
	"net/http"
)
type Retriever struct {}
func (Retriever)Get(url string)string  {
	resp,err:=http.Get(url)
	if err!=nil{
		panic(err)
	}
	defer resp.Body.Close() //程序运行玩之后close掉
	bytes,_:=ioutil.ReadAll(resp.Body)//读取resp
	return string(bytes)
}


downloader.go //在新的创建新建一个文件调用这个文件夹

package main
func getRetriever() infra.Retriever{
	return ingra.Retriever{}
}
func main(){
	var retriever infra.Retriever=getRetriever()
	fmt.Println(retriever.Get("https://www.imooc.com")
}

接口 
ducktyping的定义和实现
download使用者 retriever实现者
我们先添加go mod 
然后指定了go的安装目录
然后新建一个文件夹叫mock
再新建一个文件夹叫nre
接着在当前目录编写main.go
package main
import (
	"awesomeProject2/mock"
	"awesomeProject2/nre"
	"fmt"
)
type Retriever interface {
	Get(url string)string //由使用者定义接口的功能
}
func download(r Retriever)string  {
	return r.Get("http://www.imooc.com") //通过这个方法传入url进去调用功能
}
func main() {
	var r Retriever
	r=mock.Retriever{"this is a fake imooc.com"} //这个是我们穿进去的页面内容让它显示出来
	r=nre.Retriever{} //这里不写的原因是我们已经在nre包里实现了具体的方法
	fmt.Println(download(r))
}
然后分别在两个文件夹编写:
package nre
import (
	"net/http"
	"net/http/httputil"
	"time"
)
type Retriever struct {
	UserAgent string //这里的useragent和timeout我们先不用 先实现下面的
	timeOut time.Duration
}
func (r Retriever)Get(url string) string {
	resp,err:=http.Get(url)
	if err!=nil{
		panic(err) //这个先判断下这个URL有误错误 有的话直接返回错误信息并且退出程序没有则执行下面的
	}
	result,err:=httputil.DumpResponse( //这个函数接收两个值 返回两个值
		resp,true)
	resp.Body.Close() //接收之后需要关闭才行
	if err!=nil{
		panic(err)
	}
	return string(result) //string是我们前面定义的函数返回的string类型的值
}


package mock
type Retriever struct {
	Contents string //这个结构体里面返回一个string类型的页面内容
}
func (r Retriever)Get(url string) string {  //这里是用函数实现上面的结构体的方法功能
	return r.Contents
}
这样就实现了接口编程

接口的值类型
package main

import (
	"awesomeProject2/mock"
	"awesomeProject2/nre"
	"fmt"
)
type Retriever interface {
	Get(url string)string
}
func download(r Retriever)string  {
	return r.Get("http://www.imooc.com")
}
func main() {
	var r Retriever
	r=mock.Retriever{"this is a fake imooc.com"}
	fmt.Printf("%T,%v\n",r,r)
	r=&nre.Retriever{
		UserAgent:"Mozilla/5.0",
	}
	fmt.Printf("%T,%v\n",r,r)
	//fmt.Println(download(r))
}

-------------------------
package nre
import (
	"net/http"
	"net/http/httputil"
	"time"
)
type Retriever struct {
	UserAgent string
	timeOut time.Duration
}
func (r *Retriever)Get(url string) string {
	resp,err:=http.Get(url)
	if err!=nil{
		panic(err)
	}
	result,err:=httputil.DumpResponse(
		resp,true)
	resp.Body.Close()
	if err!=nil{
		panic(err)
	}
	return string(result)
}

接口的组合略过
系统常用接口 主要是文件处理接口 之前做过了
函数式编程
函数与闭包
闭包
package main
import "fmt"
func adder()func(int)int  {
	sum:=0
	return func(v int) int {
		sum+=v
		return sum
	}
}
func main() {
	a:=adder()
	for i:=0;i<10;i++{
		fmt.Println(a(i))
	}
}

函数编程一: //先打印出来10个斐波那切数列
package main
import "fmt"
func fib(N int) int {
	cur, next := 0, 1
	for i := 0; i < N; i++ {
		cur, next = next, cur+next
		fmt.Println(cur)
	}
	return cur
}
func main() {
	fmt.Println(fib(10))
}
python写法:
a=1
b=1
while b<100:
    print(a)
    print(b)
    a , b=b, a+b

go的函数式编程案列:
package main
import "fmt"
func fibonaqieci() func() int{
	a,b:=0,1
	return func() int {
		a,b=b,a+b
		return a
	}
}
func main() {
	f:=fibonaqieci()
	fmt.Println(f())
	fmt.Println(f())
	fmt.Println(f())
	fmt.Println(f())
	fmt.Println(f())
}
函数编程略过目前看不懂
defer引用:确保在函数结束时发生
资源管理与出错处理
package main
import "fmt"
func tryDefer()  {
	defer fmt.Println(1) //看到这句话先不打 先执行后面的打印2
	defer fmt.Println(2) //先进后出 有一个栈
	fmt.Println(3)
	panic("error occurred") //加了defer之后即便出错也会打出来
	fmt.Println(4)
}
func main() {
	tryDefer()
}

服务器错误处理
http://localhost:8888/list/a.txt

package main
import (
	"io/ioutil"
	"net/http"
	"os"
)
func main() {
	http.HandleFunc("/list/",  //指定文件url访问地址
		func(writer http.ResponseWriter,
			request *http.Request) {
			path:=request.URL.Path[len("/list/"):] //指定文件实际在服务器里的位置
			file,err:=os.Open(path) //打开文件返回两个值
			if err!=nil{
				panic(err)
			}
			defer file.Close()
			all,err:=ioutil.ReadAll(file) //读取文件内容返回两个结果
			if err!=nil{
				panic(err)
			}
			writer.Write(all) //调用这个来写入错误信息到文件里面
		})
	err:=http.ListenAndServe(":8888",nil) //开启服务器监听端口
	if err!=nil{
		panic(err)
	}
}

第十章goroutine
package main
import (
	"fmt"
	"time"
)
func main()  {
	for i:=0;i<1000;i++{//开1000个goroutine来打印hellofrom..
		go func(i int) {
			for {
				fmt.Printf("Hello from"+"goroutune %d\n",i)
			}
		}(i)
	}
	time.Sleep(time.Minute) //运行一分钟看下cpu执行的并发线程数是多少 
}

http标准库
package main
import (
	"fmt"
	"net/http"
	"net/http/httputil"
)
func main() {
	request,err:=http.NewRequest(
		http.MethodGet,
		"https://www.imooc.com/",nil)
	request.Header.Add("User-Agent",
		"Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Mobile Safari/537.36") //keyvalue格式我们传进去一个头部信息
		client:=http.Client{
			CheckRedirect: func(req *http.Request, via []*http.Request) error {
				fmt.Println("Redirect:",req)
				return nil
			},
		}
	resp,err:=client.Do(request)
	if err!=nil{
		panic(err)
	}
	defer resp.Body.Close()
	s,err:=httputil.DumpResponse(resp,true)
	if err!=nil{
		panic(err)
	}
	fmt.Printf("%s\n",s)
}



package main
import "github.com/gin-gonic/gin"
func main() {
	r := gin.Default()
	r.Use(func(c *gin.Context) {
		
	})
	r.GET("/ping", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"message": "pong",
		})
	})
	r.Run() // listen and serve on 0.0.0.0:8080 (for windows "localhost:8080")
}



爬虫项目介绍
单任务版爬虫
获取并打印用户第一页面的信息
go get golang.org/x/text #处理乱码问题
go get golang.org/x/net/html  #自动识别浏览器及标准语法
go get -u go.uber.org/zap 日志包

package main
import (
	"bufio"
	"fmt"
	"golang.org/x/net/html/charset"
	"golang.org/x/text/encoding"
	"golang.org/x/text/transform"
	"io"
	"io/ioutil"
	"net/http"
)
func main() {
	resp,err:=http.Get("https://www.zhenai.com/zhenghun")
	if err!=nil{
		panic(err)
	}
	defer resp.Body.Close()
	if resp.StatusCode!=http.StatusOK { //只判断头部信息是否ok
		fmt.Println("Error:status code",
			resp.StatusCode)
		return
	}
	e:=determineEncoding(resp.Body)
	utf8Reader:=transform.NewReader(resp.Body,e.NewDecoder())//转码
		all,err:=ioutil.ReadAll(utf8Reader) //只获取Body用ReadAll方法
		if err!=nil{
			panic(err)
		}
		fmt.Printf("%s\n",all)
}
func determineEncoding( //定义一个自动检查浏览器是什么格式的并且自动转换
	r io.Reader)encoding.Encoding{
	bytes,err:=bufio.NewReader(r).Peek(1024)
	if err!=nil{
		panic(err)
	}
	e,_,_:=charset.DetermineEncoding(
	bytes,""	)
	return e
}
正则表达式
package main

import (
	"fmt"
	"regexp"
)
const text  ="my email is ccmouse@gmail.com"
func main() {
	re:=regexp.MustCompile("ccmouse@gmail.com")
	match:=re.FindString(text) //参数是一个string
	fmt.Println(match)
}
-------------------------------------
package main
import (
	"fmt"
	"regexp"
)
const text  =`
my email is ccmouse@gmail.com
email  is abc@def.org
email2 if kkk@qq.com
email3 is ddd@abc.com.cn
`
func main() {
	re:=regexp.MustCompile(
		`([a-zA-Z0-9]+)@([a-zA-Z0-9.]+)\.([a-zA-Z0-9]+)`) //\.表示以.结尾 定义一个正则表达式使用
	match:=re.FindAllString(text,-1) //参数是一个string -1找所有这样的匹配
	fmt.Println(match)
}

----------------------------------
package main
import (
	"fmt"
	"regexp"
)
const text  =`
my email is ccmouse@gmail.com
email  is abc@def.org
email2 if kkk@qq.com
email3 is ddd@abc.com.cn
`
func main() {
	re:=regexp.MustCompile(
		`([a-zA-Z0-9]+)@([a-zA-Z0-9]+)(\.[a-zA-Z0-9.]+)`) //\.表示以.结尾 定义一个正则表达式使用
	match:=re.FindAllStringSubmatch(text,-1) //参数是一个string -1找所有这样的匹配
	for _,m:=range match{
		fmt.Println(m)
	}
}
--------------------
提取城市和url
package main
import (
	"bufio"
	"fmt"
	"golang.org/x/net/html/charset"
	"golang.org/x/text/encoding"
	"golang.org/x/text/transform"
	"io"
	"io/ioutil"
	"net/http"
	"regexp"
)
func main() {
	resp,err:=http.Get("http://www.zhenai.com/zhenghun")
	if err!=nil{
		panic(err)
	}
	defer resp.Body.Close()
	if resp.StatusCode!=http.StatusOK { //只判断头部信息是否ok
		fmt.Println("Error:status code",
			resp.StatusCode)
		return
	}
	e:=determineEncoding(resp.Body)
	utf8Reader:=transform.NewReader(resp.Body,e.NewDecoder())//转码
		all,err:=ioutil.ReadAll(utf8Reader) //只获取Body用ReadAll方法
		if err!=nil{
			panic(err)
		}
	printCityList(all) //不打印输出列举出来城市列表
}
func determineEncoding( //定义一个自动检查浏览器是什么格式的并且自动转换
	r io.Reader)encoding.Encoding{
	bytes,err:=bufio.NewReader(r).Peek(1024)
	if err!=nil{
		panic(err)
	}
	e,_,_:=charset.DetermineEncoding(
	bytes,""	)
	return e
}
func printCityList(contents []byte)  {
	re:=regexp.MustCompile(`<a href="(http://www.zhenai.com/zhenghun/[0-9a-z]+)"[^>]*>([^<]+)</a>`)
	matches:=re.FindAllSubmatch(contents,-1) //-1表示所有
	for _,m:=range matches{
		fmt.Printf("City:%s,URL:%s\n",m[2],m[1])
	}
	fmt.Printf("Matches found:%d\n",len(matches))
}
单任务版爬虫架构
书本知识:
package main
import "fmt"
func main()  {
   //Loop1:
      for {
         x:=1
         switch  {
         case x>0:
            fmt.Println("A")
            //break Loop1
         case x==1:
            fmt.Println("b")
         default:
            fmt.Println("c")
         }
      }
}

package main

import "fmt"

func main()  {
   m:=map[string]int{"a":3,"b":1} //定义k的类型是string v的类型是int
   for k,v:=range m{
      fmt.Println(k,v)
   }
   test()
}
func test()  {
   numbers:=[5]int{1,2,3,4}
   for i,x:=range numbers{
      fmt.Printf("%d,%d\n",i,x) //最后4下表对应的是0值
   }
}

package main
import (
   "fmt"
)
func main()  {
   str:="abc"
   for i,char :=range str{
      fmt.Printf("%d %d\n",i,char)
   }
   for i,_:=range str{
      fmt.Printf("%d\n",i)
   }
   for _,i:=range str{
      fmt.Printf("%d\n",i)
   }
   for range str {
      fmt.Println("111")
   }
}

package main
import "fmt"
func main()  {
   a:=make(chan int,1024)
   fmt.Println(a)
   b:=make(chan int,1024)
   fmt.Println(b)
   for i:=0;i<10;i++{
      fmt.Printf("第%d次",i)
      a<-1
      b<-1
      select {
      case <-a:
         fmt.Println("from a")
      case <-b:
         fmt.Println("from b")
      }
   }
}

package main
import "fmt"
func main() {
   test(10)
}
func test(number int)  {
   a:=0
   b:=1
   for i:=0;i<number;i++{
      a,b=b,a+b
      fmt.Println(a)
   }
}

package fetcher
import (
	"bufio"
	"fmt"
	"golang.org/x/net/html/charset"
	"golang.org/x/text/encoding"
	"golang.org/x/text/encoding/unicode"
	"golang.org/x/text/transform"
	"io"
	"io/ioutil"
	"log"
	"net/http"
)
func Fetch(url string)([]byte,error)  {
	resp,err:=http.Get(url)
	if err!=nil{
		return nil,err
	}
	defer resp.Body.Close()
	if resp.StatusCode!=http.StatusOK { //只判断头部信息是否ok
		return nil,
		fmt.Errorf("wrong status code:%d",
			resp.StatusCode)
	}
	e:=determineEncoding(resp.Body)
	utf8Reader:=transform.NewReader(resp.Body,e.NewDecoder())//转码
	return ioutil.ReadAll(utf8Reader) //只获取Body用ReadAll方法
}
func determineEncoding( //定义一个自动检查浏览器是什么格式的并且自动转换
	r io.Reader)encoding.Encoding{
	bytes,err:=bufio.NewReader(r).Peek(1024)
	if err!=nil{
		log.Printf("Fetcher error:%v",err)
		return unicode.UTF8
	}
	e,_,_:=charset.DetermineEncoding(
		bytes,""	)
	return e
}
